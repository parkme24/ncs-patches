From 1da98d97d931d7d5d7768b861d46e727399702d2 Mon Sep 17 00:00:00 2001
From: Xavier Naveira <xnaveira@gmail.com>
Date: Sat, 15 May 2021 09:29:27 +0200
Subject: [PATCH] lis2dh driver modifications

---
 drivers/sensor/lis2dh/lis2dh.c         |  55 +++-
 drivers/sensor/lis2dh/lis2dh.h         |  15 ++
 drivers/sensor/lis2dh/lis2dh_trigger.c | 354 ++++++++++++++++++-------
 3 files changed, 326 insertions(+), 98 deletions(-)

diff --git a/drivers/sensor/lis2dh/lis2dh.c b/drivers/sensor/lis2dh/lis2dh.c
index 126b79eb04..15796a3813 100644
--- a/drivers/sensor/lis2dh/lis2dh.c
+++ b/drivers/sensor/lis2dh/lis2dh.c
@@ -18,6 +18,43 @@ LOG_MODULE_REGISTER(lis2dh, CONFIG_SENSOR_LOG_LEVEL);
 #define ACCEL_SCALE(sensitivity)			\
 	((SENSOR_G * (sensitivity) >> 14) / 100)
 
+
+//#define MONITOR_REGS true
+
+#ifdef MONITOR_REGS
+#define MY_STACK_SIZE 500
+#define MY_PRIORITY K_PRIO_COOP(10)
+
+static void reg_monitor(struct lis2dh_data *lis2dh) {
+    while (1) {
+        uint8_t value = 0;
+        lis2dh->hw_tf->read_reg(lis2dh->dev, LIS2DH_REG_CTRL1, &value);
+        printk("CTRL_REG1: %d\n", value);
+	    lis2dh->hw_tf->read_reg(lis2dh->dev, LIS2DH_REG_CTRL2, &value);
+	    printk("CTRL_REG2: %d\n", value);
+//	    lis2dh->hw_tf->read_reg(lis2dh->dev, LIS2DH_REG_CTRL3, &value);
+//	    printk("CTRL_REG3: %d\n", value);
+//        lis2dh->hw_tf->read_reg(lis2dh->dev, LIS2DH_REG_CTRL5, &value);
+//        printk("CTRL_REG5: %d\n", value);
+        lis2dh->hw_tf->read_reg(lis2dh->dev, LIS2DH_REG_CTRL6, &value);
+        printk("CTRL_REG6: %d\n", value);
+        lis2dh->hw_tf->read_reg(lis2dh->dev, LIS2DH_REG_INT2_THS, &value);
+        printk("INT2_THS: %d\n", value);
+        lis2dh->hw_tf->read_reg(lis2dh->dev, LIS2DH_REG_INT2_DUR, &value);
+        printk("INT2_DUR: %d\n", value);
+        lis2dh->hw_tf->read_reg(lis2dh->dev, LIS2DH_REG_ACT_THS, &value);
+        printk("ACT_THS: %d\n", value);
+        lis2dh->hw_tf->read_reg(lis2dh->dev, LIS2DH_REG_ACT_DUR, &value);
+        printk("ACT_DUR: %d\n", value);
+        printk("------\n");
+        k_sleep(K_MSEC(5000));
+    }
+}
+
+K_THREAD_STACK_DEFINE(my_stack_area, MY_STACK_SIZE);
+struct k_thread my_thread_data;
+#endif
+
 /*
  * Use values for low-power mode in DS "Mechanical (Sensor) characteristics",
  * multiplied by 100.
@@ -231,6 +268,8 @@ static int lis2dh_acc_config(const struct device *dev,
 #if defined(CONFIG_LIS2DH_TRIGGER)
 	case SENSOR_ATTR_SLOPE_TH:
 	case SENSOR_ATTR_SLOPE_DUR:
+    case SENSOR_ATTR_ACT_TH:
+    case SENSOR_ATTR_ACT_DUR:
 		return lis2dh_acc_slope_config(dev, attr, val);
 #endif
 	default:
@@ -261,9 +300,9 @@ static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
 
 static const struct sensor_driver_api lis2dh_driver_api = {
 	.attr_set = lis2dh_attr_set,
-#if CONFIG_LIS2DH_TRIGGER
+//#if CONFIG_LIS2DH_TRIGGER
 	.trigger_set = lis2dh_trigger_set,
-#endif
+//#endif
 	.sample_fetch = lis2dh_sample_fetch,
 	.channel_get = lis2dh_channel_get,
 };
@@ -338,10 +377,22 @@ int lis2dh_init(const struct device *dev)
 	}
 #endif
 
+	//Enable HP
+	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL2, 129);
+
 	LOG_INF("bus=%s fs=%d, odr=0x%x lp_en=0x%x scale=%d",
 		    cfg->bus_name, 1 << (LIS2DH_FS_IDX + 1),
 		    LIS2DH_ODR_IDX, (uint8_t)LIS2DH_LP_EN_BIT, lis2dh->scale);
 
+#ifdef MONITOR_REGS
+    k_thread_create(&my_thread_data, my_stack_area,
+                         K_THREAD_STACK_SIZEOF(my_stack_area),
+                         (k_thread_entry_t) reg_monitor,
+                         lis2dh, NULL, NULL,
+                         MY_PRIORITY, 0, K_NO_WAIT);
+#endif
+
+
 	/* enable accel measurements and set power mode and data rate */
 	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
 					LIS2DH_ACCEL_EN_BITS | LIS2DH_LP_EN_BIT |
diff --git a/drivers/sensor/lis2dh/lis2dh.h b/drivers/sensor/lis2dh/lis2dh.h
index f0674c5307..1a2cf41043 100644
--- a/drivers/sensor/lis2dh/lis2dh.h
+++ b/drivers/sensor/lis2dh/lis2dh.h
@@ -118,6 +118,8 @@
 #define LIS2DH_REG_CTRL5		0x24
 #define LIS2DH_LIR_INT2_SHIFT		1
 #define LIS2DH_EN_LIR_INT2		BIT(LIS2DH_LIR_INT2_SHIFT)
+#define LIS2DH_LIR_INT1_SHIFT		3
+#define LIS2DH_EN_LIR_INT1		BIT(LIS2DH_LIR_INT1_SHIFT)
 
 #define LIS2DH_REG_CTRL6		0x25
 #define LIS2DH_EN_INT2_INT2_SHIFT	5
@@ -154,8 +156,10 @@
 #define LIS2DH_INT_CFG_XHIE_XUPE	BIT(1)
 #define LIS2DH_INT_CFG_XLIE_XDOWNE	BIT(0)
 
+#define LIS2DH_REG_INT1_SRC		0x30
 #define LIS2DH_REG_INT2_SRC		0x35
 
+#define LIS2DH_REG_INT1_THS		0x32
 #define LIS2DH_REG_INT2_THS		0x36
 
 #define LIS2DH_REG_INT2_DUR		0x37
@@ -178,6 +182,12 @@
 #define LIS2DH_INT1_GPIO_DEV_NAME	DT_INST_GPIO_LABEL(0, irq_gpios)
 #endif
 
+#define LIS2DH_REG_ACT_THS  0x3e
+#define LIS2DH_REG_ACT_DUR  0x3f
+#define LIS2DH_REG_INT2_THS 0x36
+#define LIS2DH_REG_INT_DUR 0x37
+
+
 union lis2dh_sample {
 	uint8_t raw[LIS2DH_BUF_SZ];
 	struct {
@@ -274,6 +284,11 @@ int lis2dh_acc_slope_config(const struct device *dev,
 			    const struct sensor_value *val);
 #endif
 
+enum sensor_attribute_extended {
+    SENSOR_ATTR_ACT_TH = SENSOR_ATTR_PRIV_START + 1,
+    SENSOR_ATTR_ACT_DUR
+};
+
 int lis2dh_spi_init(const struct device *dev);
 int lis2dh_i2c_init(const struct device *dev);
 
diff --git a/drivers/sensor/lis2dh/lis2dh_trigger.c b/drivers/sensor/lis2dh/lis2dh_trigger.c
index 2b8e8984cf..139db1adfa 100644
--- a/drivers/sensor/lis2dh/lis2dh_trigger.c
+++ b/drivers/sensor/lis2dh/lis2dh_trigger.c
@@ -64,51 +64,58 @@ static int lis2dh_trigger_drdy_set(const struct device *dev,
 
 	return 0;
 }
-
+#define LIS2DH_ANYM_CFG (LIS2DH_INT_CFG_ZHIE_ZUPE | LIS2DH_INT_CFG_YHIE_YUPE |\
+			 LIS2DH_INT_CFG_XHIE_XUPE)
 static int lis2dh_start_trigger_int1(const struct device *dev)
 {
-	int status;
-	uint8_t raw[LIS2DH_BUF_SZ];
-	uint8_t ctrl1 = 0U;
-	struct lis2dh_data *lis2dh = dev->data;
-
-	/* power down temporarily to align interrupt & data output sampling */
-	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &ctrl1);
-	if (unlikely(status < 0)) {
-		return status;
-	}
-	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
-					  ctrl1 & ~LIS2DH_ODR_MASK);
-
-	if (unlikely(status < 0)) {
-		return status;
-	}
-
-	LOG_DBG("ctrl1=0x%x @tick=%u", ctrl1, k_cycle_get_32());
+//	int status;
+//	uint8_t raw[LIS2DH_BUF_SZ];
+//	uint8_t ctrl1 = 0U;
+//	struct lis2dh_data *lis2dh = dev->data;
+//
+//	/* power down temporarily to align interrupt & data output sampling */
+//	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &ctrl1);
+//	if (unlikely(status < 0)) {
+//		return status;
+//	}
+//	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
+//					  ctrl1 & ~LIS2DH_ODR_MASK);
+//
+//	if (unlikely(status < 0)) {
+//		return status;
+//	}
+//
+//	LOG_DBG("ctrl1=0x%x @tick=%u", ctrl1, k_cycle_get_32());
+//
+//	/* empty output data */
+//	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
+//					  raw, sizeof(raw));
+//	if (unlikely(status < 0)) {
+//		return status;
+//	}
+//
+//	setup_int1(dev, true);
+//
+//	/* re-enable output sampling */
+//	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1, ctrl1);
+//	if (unlikely(status < 0)) {
+//		return status;
+//	}
+//
+//	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL3,
+//					 LIS2DH_EN_DRDY1_INT1,
+//					 LIS2DH_EN_DRDY1_INT1);
+    struct lis2dh_data *lis2dh = dev->data;
+
+    setup_int1(dev, true);
+
+    return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT1_CFG,
+                                    LIS2DH_ANYM_CFG);
 
-	/* empty output data */
-	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
-					  raw, sizeof(raw));
-	if (unlikely(status < 0)) {
-		return status;
-	}
-
-	setup_int1(dev, true);
-
-	/* re-enable output sampling */
-	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1, ctrl1);
-	if (unlikely(status < 0)) {
-		return status;
-	}
-
-	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL3,
-					 LIS2DH_EN_DRDY1_INT1,
-					 LIS2DH_EN_DRDY1_INT1);
 }
 
-#if DT_INST_PROP_HAS_IDX(0, irq_gpios, 1)
-#define LIS2DH_ANYM_CFG (LIS2DH_INT_CFG_ZHIE_ZUPE | LIS2DH_INT_CFG_YHIE_YUPE |\
-			 LIS2DH_INT_CFG_XHIE_XUPE)
+//#if DT_INST_PROP_HAS_IDX(0, irq_gpios, 1)
+
 
 static inline void setup_int2(const struct device *dev,
 			      bool enable)
@@ -157,6 +164,41 @@ static int lis2dh_trigger_anym_set(const struct device *dev,
 	return 0;
 }
 
+static int lis2dh_trigger_highm_set(const struct device *dev,
+				   sensor_trigger_handler_t handler)
+{
+	struct lis2dh_data *lis2dh = dev->data;
+	int status;
+	uint8_t reg_val;
+
+	setup_int1(dev, false);
+
+	/* cancel potentially pending trigger */
+	atomic_clear_bit(&lis2dh->trig_flags, TRIGGED_INT1);
+
+	/* disable all interrupt 1 events */
+	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT1_CFG, 0);
+
+	/* make sure any pending interrupt is cleared */
+	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_INT1_SRC, &reg_val);
+
+	lis2dh->handler_drdy = handler;
+	if ((handler == NULL) || (status < 0)) {
+		return status;
+	}
+
+	/* serialize start of int1 in thread to synchronize output sampling
+	 * and first interrupt. this avoids concurrent bus context access.
+	 */
+	atomic_set_bit(&lis2dh->trig_flags, START_TRIG_INT1);
+#if defined(CONFIG_LIS2DH_TRIGGER_OWN_THREAD)
+	k_sem_give(&lis2dh->gpio_sem);
+#elif defined(CONFIG_LIS2DH_TRIGGER_GLOBAL_THREAD)
+	k_work_submit(&lis2dh->work);
+#endif
+	return 0;
+}
+
 static int lis2dh_start_trigger_int2(const struct device *dev)
 {
 	struct lis2dh_data *lis2dh = dev->data;
@@ -166,7 +208,7 @@ static int lis2dh_start_trigger_int2(const struct device *dev)
 	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT2_CFG,
 					LIS2DH_ANYM_CFG);
 }
-#endif /* DT_INST_PROP_HAS_IDX(0, irq_gpios, 1) */
+//#endif /* DT_INST_PROP_HAS_IDX(0, irq_gpios, 1) */
 
 int lis2dh_trigger_set(const struct device *dev,
 		       const struct sensor_trigger *trig,
@@ -175,13 +217,16 @@ int lis2dh_trigger_set(const struct device *dev,
 	if (trig->type == SENSOR_TRIG_DATA_READY &&
 	    trig->chan == SENSOR_CHAN_ACCEL_XYZ) {
 		return lis2dh_trigger_drdy_set(dev, trig->chan, handler);
-#if DT_INST_PROP_HAS_IDX(0, irq_gpios, 1)
+//#if DT_INST_PROP_HAS_IDX(0, irq_gpios, 1)
 	} else if (trig->type == SENSOR_TRIG_DELTA) {
 		return lis2dh_trigger_anym_set(dev, handler);
-#endif /* DT_INST_PROP_HAS_IDX(0, irq_gpios, 1) */
+	} else if (trig->type == SENSOR_TRIG_THRESHOLD){
+        	return lis2dh_trigger_highm_set(dev, handler);
 	}
+//#endif /* DT_INST_PROP_HAS_IDX(0, irq_gpios, 1) */
+
 
-	return -ENOTSUP;
+        return -ENOTSUP;
 }
 
 int lis2dh_acc_slope_config(const struct device *dev,
@@ -190,51 +235,94 @@ int lis2dh_acc_slope_config(const struct device *dev,
 {
 	struct lis2dh_data *lis2dh = dev->data;
 	int status;
+    int dest_reg;
 
-	if (attr == SENSOR_ATTR_SLOPE_TH) {
-		uint8_t range_g, reg_val;
-		uint32_t slope_th_ums2;
+    uint8_t range_g, reg_val;
+    uint32_t slope_th_ums2;
 
-		status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_CTRL4,
-						 &reg_val);
-		if (status < 0) {
-			return status;
-		}
+    switch (attr) {
+        case SENSOR_ATTR_SLOPE_TH:
+            status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_CTRL4,
+                                             &reg_val);
+            if (status < 0) {
+                return status;
+            }
 
-		/* fs reg value is in the range 0 (2g) - 3 (16g) */
-		range_g = 2 * (1 << ((LIS2DH_FS_MASK & reg_val)
-				      >> LIS2DH_FS_SHIFT));
+            /* fs reg value is in the range 0 (2g) - 3 (16g) */
+            range_g = 2 * (1 << ((LIS2DH_FS_MASK & reg_val) >> LIS2DH_FS_SHIFT));
 
-		slope_th_ums2 = val->val1 * 1000000 + val->val2;
+            slope_th_ums2 = val->val1 * 1000000 + val->val2;
 
-		/* make sure the provided threshold does not exceed range */
-		if ((slope_th_ums2 - 1) > (range_g * SENSOR_G)) {
-			return -EINVAL;
-		}
+            /* make sure the provided threshold does not exceed range */
+            if ((slope_th_ums2 - 1) > (range_g * SENSOR_G)) {
+                return -EINVAL;
+            }
+            printk("INACTIVITY TH: %d\n",slope_th_ums2);
+            /* 7 bit full range value */
+            reg_val = 128 / range_g * (slope_th_ums2 - 1) / SENSOR_G;
 
-		/* 7 bit full range value */
-		reg_val = 128 / range_g * (slope_th_ums2 - 1) / SENSOR_G;
+            LOG_INF("inact_int2_ths=0x%x range_g=%d ums2=%u", reg_val, range_g, slope_th_ums2 - 1);
 
-		LOG_INF("int2_ths=0x%x range_g=%d ums2=%u", reg_val,
-			    range_g, slope_th_ums2 - 1);
+//            dest_reg = power_saving ?  : LIS2DH_REG_INT2_THS;
 
-		status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT2_THS,
-						  reg_val);
-	} else { /* SENSOR_ATTR_SLOPE_DUR */
-		/*
+            status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_ACT_THS, reg_val);
+            break;
+        case SENSOR_ATTR_SLOPE_DUR:
+            /*
 		 * slope duration is measured in number of samples:
 		 * N/ODR where N is the register value
 		 */
-		if (val->val1 < 0 || val->val1 > 127) {
-			return -ENOTSUP;
-		}
+            if (val->val1 < 0 || val->val1 > 127) {
+                return -ENOTSUP;
+            }
+
+            LOG_INF("inact_int2_dur=0x%x", val->val1);
+
+//            dest_reg = power_saving ? LIS2DH_REG_ACT_DUR : LIS2DH_REG_INT2_DUR;
+
+            status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_ACT_DUR, val->val1);
+            break;
+        case SENSOR_ATTR_ACT_TH:
+            status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_CTRL4, &reg_val);
+            if (status < 0) {
+                return status;
+            }
+
+            /* fs reg value is in the range 0 (2g) - 3 (16g) */
+            range_g = 2 * (1 << ((LIS2DH_FS_MASK & reg_val) >> LIS2DH_FS_SHIFT));
+
+            slope_th_ums2 = val->val1 * 1000000 + val->val2;
+
+            /* make sure the provided threshold does not exceed range */
+            if ((slope_th_ums2 - 1) > (range_g * SENSOR_G)) {
+                return -EINVAL;
+            }
+            printk("ACTIVITY TH: %d\n",slope_th_ums2);
+            /* 7 bit full range value */
+            reg_val = 128 / range_g * (slope_th_ums2 - 1) / SENSOR_G;
+
+            LOG_INF("act_int1_ths=0x%x range_g=%d ums2=%u", reg_val, range_g, slope_th_ums2 - 1);
+
+            status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT2_THS, reg_val);
+            break;
+            break;
+        case SENSOR_ATTR_ACT_DUR:
+            /*
+		 * slope duration is measured in number of samples:
+		 * N/ODR where N is the register value
+		 */
+            if (val->val1 < 0 || val->val1 > 127) {
+                return -ENOTSUP;
+            }
 
-		LOG_INF("int2_dur=0x%x", val->val1);
+            LOG_INF("inact_int2_dur=0x%x", val->val1);
 
-		status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT2_DUR,
-						  val->val1);
-	}
 
+            status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT2_DUR, val->val1);
+            break;
+        default:
+            LOG_ERR("Setting up non existent attribute: %d", attr);
+    }
 	return status;
 }
 
@@ -255,7 +343,7 @@ static void lis2dh_gpio_int1_callback(const struct device *dev,
 #endif
 }
 
-#if DT_INST_PROP_HAS_IDX(0, irq_gpios, 1)
+//#if DT_INST_PROP_HAS_IDX(0, irq_gpios, 1)
 static void lis2dh_gpio_int2_callback(const struct device *dev,
 				      struct gpio_callback *cb, uint32_t pins)
 {
@@ -272,7 +360,7 @@ static void lis2dh_gpio_int2_callback(const struct device *dev,
 	k_work_submit(&lis2dh->work);
 #endif
 }
-#endif /* DT_INST_PROP_HAS_IDX(0, irq_gpios, 1) */
+//#endif /* DT_INST_PROP_HAS_IDX(0, irq_gpios, 1) */
 
 static void lis2dh_thread_cb(const struct device *dev)
 {
@@ -281,41 +369,72 @@ static void lis2dh_thread_cb(const struct device *dev)
 
 	if (unlikely(atomic_test_and_clear_bit(&lis2dh->trig_flags,
 		     START_TRIG_INT1))) {
+//		printk("INT1!!!!!!!!!!!!!!!!!!!!!!\n");
 		status = lis2dh_start_trigger_int1(dev);
 
 		if (unlikely(status < 0)) {
 			LOG_ERR("lis2dh_start_trigger_int1: %d", status);
 		}
 		return;
+//	} else {
+//		printk("NOOOOO INT1!!!!!!\n");
 	}
 
-#if DT_INST_PROP_HAS_IDX(0, irq_gpios, 1)
+//#if DT_INST_PROP_HAS_IDX(0, irq_gpios, 1)
 	if (unlikely(atomic_test_and_clear_bit(&lis2dh->trig_flags,
 		     START_TRIG_INT2))) {
+//		printk("INT2!!!!!!!!!!!!!!!!!!!!!!\n");
+
+        //init inverse polarity
+        lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL6, 2, 2);
+
 		status = lis2dh_start_trigger_int2(dev);
 
 		if (unlikely(status < 0)) {
 			LOG_ERR("lis2dh_start_trigger_int2: %d", status);
 		}
 		return;
+//    } else {
+//		printk("NOOOOO INT2!!!!!!\n");
 	}
-#endif /* DT_INST_PROP_HAS_IDX(0, irq_gpios, 1) */
+//#endif /* DT_INST_PROP_HAS_IDX(0, irq_gpios, 1) */
 
 	if (atomic_test_and_clear_bit(&lis2dh->trig_flags,
 				      TRIGGED_INT1)) {
-		struct sensor_trigger drdy_trigger = {
-			.type = SENSOR_TRIG_DATA_READY,
-			.chan = lis2dh->chan_drdy,
-		};
-
-		if (likely(lis2dh->handler_drdy != NULL)) {
-			lis2dh->handler_drdy(dev, &drdy_trigger);
-		}
+//		struct sensor_trigger drdy_trigger = {
+//			.type = SENSOR_TRIG_DATA_READY,
+//			.chan = lis2dh->chan_drdy,
+//		};
+
+//		if (likely(lis2dh->handler_drdy != NULL)) {
+//			lis2dh->handler_drdy(dev, &drdy_trigger);
+//		}
+        struct sensor_trigger anym_trigger = {
+                .type = SENSOR_TRIG_THRESHOLD,
+                .chan = lis2dh->chan_drdy,
+        };
+
+        uint8_t reg_val;
+
+        /* clear interrupt 2 to de-assert int2 line */
+        status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_INT1_SRC,
+                                         &reg_val);
+        if (status < 0) {
+            LOG_ERR("clearing interrupt 1 failed: %d", status);
+            return;
+        }
+
+        if (likely(lis2dh->handler_drdy != NULL)) {
+            lis2dh->handler_drdy(dev, &anym_trigger);
+        }
+
+        LOG_DBG("@tick=%u int1_src=0x%x", k_cycle_get_32(),
+                reg_val);
 
 		return;
 	}
 
-#if DT_INST_PROP_HAS_IDX(0, irq_gpios, 1)
+//#if DT_INST_PROP_HAS_IDX(0, irq_gpios, 1)
 	if (atomic_test_and_clear_bit(&lis2dh->trig_flags,
 				      TRIGGED_INT2)) {
 		struct sensor_trigger anym_trigger = {
@@ -332,6 +451,13 @@ static void lis2dh_thread_cb(const struct device *dev)
 			return;
 		}
 
+		uint8_t ctr6_val;
+
+//		printk("Reverse polarity\n");
+		lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_CTRL6, &ctr6_val);
+		lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL6, 2, ~ctr6_val);
+
+
 		if (likely(lis2dh->handler_anymotion != NULL)) {
 			lis2dh->handler_anymotion(dev, &anym_trigger);
 		}
@@ -341,7 +467,7 @@ static void lis2dh_thread_cb(const struct device *dev)
 
 		return;
 	}
-#endif /* DT_INST_PROP_HAS_IDX(0, irq_gpios, 1) */
+//#endif /* DT_INST_PROP_HAS_IDX(0, irq_gpios, 1) */
 }
 
 #ifdef CONFIG_LIS2DH_TRIGGER_OWN_THREAD
@@ -415,7 +541,39 @@ int lis2dh_init_interrupt(const struct device *dev)
 
 	LOG_INF("int1 on pin=%d", LIS2DH_INT1_GPIOS_PIN);
 
-#if DT_INST_PROP_HAS_IDX(0, irq_gpios, 1)
+	/* disable interrupt 1 in case of warm (re)boot */
+	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT1_CFG, 0);
+	if (status < 0) {
+		LOG_ERR("Interrupt 1 disable reg write failed (%d)",
+			status);
+		return status;
+	}
+
+	(void)memset(raw, 0, sizeof(raw));
+	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_INT1_THS,
+					   raw, sizeof(raw));
+	if (status < 0) {
+		LOG_ERR("Burst write to INT1 THS failed (%d)", status);
+		return status;
+	}
+
+	/* enable interrupt 2 on int2 line */
+//	status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL6,
+//					   LIS2DH_EN_INT2_INT2,
+//					   LIS2DH_EN_INT2_INT2);
+
+	/* latch int1 line interrupt */
+	status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL5,
+					  LIS2DH_EN_LIR_INT1,LIS2DH_EN_LIR_INT1);
+	//enable activity on int1
+	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL3,32);
+
+	if (status < 0) {
+		LOG_ERR("INT1 latch enable reg write failed (%d)", status);
+		return status;
+	}
+
+//#if DT_INST_PROP_HAS_IDX(0, irq_gpios, 1)
 	/* setup any motion gpio interrupt */
 	lis2dh->gpio_int2 = device_get_binding(LIS2DH_INT2_GPIO_DEV_NAME);
 	if (lis2dh->gpio_int2 == NULL) {
@@ -463,18 +621,22 @@ int lis2dh_init_interrupt(const struct device *dev)
 	}
 
 	/* enable interrupt 2 on int2 line */
-	status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL6,
-					   LIS2DH_EN_INT2_INT2,
-					   LIS2DH_EN_INT2_INT2);
+//	status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL6,
+//					   LIS2DH_EN_INT2_INT2,
+//					   LIS2DH_EN_INT2_INT2);
 
 	/* latch int2 line interrupt */
-	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL5,
-					  LIS2DH_EN_LIR_INT2);
+	status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL5,
+					  LIS2DH_EN_LIR_INT2,LIS2DH_EN_LIR_INT2);
+	//enable inactivity on int2
+//	status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL6, 40,8);
+	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL6,8);
+
 	if (status < 0) {
 		LOG_ERR("INT2 latch enable reg write failed (%d)", status);
 		return status;
 	}
-#endif /* DT_INST_PROP_HAS_IDX(0, irq_gpios, 1) */
+//#endif /* DT_INST_PROP_HAS_IDX(0, irq_gpios, 1) */
 
 	return status;
 }
-- 
2.30.1 (Apple Git-130)

